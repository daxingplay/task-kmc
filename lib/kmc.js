var Execution = require('execution');
var path = require('path');
var Record = require('record');
var glob = require('glob');
var os = require('os');
var fs = require('fs');

module.exports = Execution.extend({
    // The type of option could be HTML5 input types: file, directory, number, range, select,
    // url, email, tel, color, date, time, month, time, week, datetime(datetime-local),
    // string(text), boolean(checkbox), array, regexp, function and object.
    options: {
        name: {
            label: 'Package name',
            type: 'string'
        },
        src: {
            label: 'Src file',
            type: 'string'
        },
        dest: {
            label: 'Dest file',
            type: 'string'
        },
        dep: {
            label: 'Modules dependence config file dest path',
            type: 'string'
        },
        combo: {
            label: 'Online combo mode',
            type: 'boolean'
        },
        map: {
            label: 'Generate all online combo mode modules dependence config in dependence config file',
            type: 'boolean'
        },
        packages: {
            label: 'KISSY package config',
            type: 'object'
        },
        charset: {
            label: 'File charset',
            type: 'string',
            default: 'utf8'
        }
    },
    run: function (inputs, options, logger, settings) {
        return this._run(inputs, options, logger, settings);
    },
    execute: function (resolve, reject) {
        var options = this.options;
        var inputs = this.inputs;
        var logger = this.logger;
        var packages = options.packages || {};
        var name = options.name;
        var src = path.resolve(options.src);
        var dest = path.resolve(options.dest);
        var dep = options.dep && path.resolve(options.dep);
        var charset = options.charset;

        var combo = options.combo;
        var map = options.map;

        logger.log('Build KISSY modules with', src);

        var defaultPackage = {
            name: name,
            path: path.dirname(src),
            // hack for kmc
            base: path.dirname(src),
            ignorePackageNameInUri: true
        };

        if(Array.isArray(packages)){
            packages.push(
                defaultPackage
            );
        }else if(!packages[name]){
            packages[name] = defaultPackage
        }

        var kmc = require('kmc');
        kmc.config({
            packages: packages
        });

        if(combo){

            var dependenciesResults = [];

            glob.sync(src).forEach(function(file){
                var depenences = kmc.combo(
                    file, // inputFile
                    undefined, // depFileName
                    charset, // depFileCharset
                    true, // fixModuleName
                    true, // returnDependencies
                    dest, // outputDir should be dir
                    true // comboOnly
                );

                logger.log('File', file, 'module name fixed generated to', dest);

                dependenciesResults.push(depenences);
            });

            if(map){
                var content = [];
                var writed = [];
                dependenciesResults.forEach(function(result){
                    if(result.modules){
                        for(var modName in result.modules){
                            if(writed.indexOf(modName) === -1){
                                var mod = result.modules[modName];
                                var requires = [];
                                if(mod && mod.dependencies && mod.dependencies.length){
                                    mod.dependencies.forEach(function(subMod){
                                        requires.push("'" + subMod.name + "'");
                                    });
                                    content.push("'" + modName + "': { requires: [" + requires.join(', ') + "]}");
                                }
                                writed.push(modName);
                            }
                        }
                    }
                });
                var mapResults = '/* Generated by task-kmc */' + os.EOL;
                if(content.length){
                    mapResults +=  "KISSY.config('modules', {" + os.EOL + " " + content.join("," + os.EOL + " ") + " " + os.EOL + "});";
                }

                fs.writeFileSync(dep, mapResults, {
                    encoding: charset
                });

                logger.log('Modules config file ' + dep + ' generated')
            }


        }else{

            kmc.build({
                src: src,
                dest: dest,
                depPath: dep
            });

            logger.log('File ' + dest + ' generated')
        }

        resolve(inputs);
    }
})
